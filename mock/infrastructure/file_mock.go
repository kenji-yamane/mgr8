// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/file.go

// Package infrastructure_mock is a generated GoMock package.
package infrastructure_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	infrastructure "github.com/kenji-yamane/mgr8/infrastructure"
)

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockFileService) List(fileDirectory string) ([]infrastructure.MigrationFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", fileDirectory)
	ret0, _ := ret[0].([]infrastructure.MigrationFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFileServiceMockRecorder) List(fileDirectory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFileService)(nil).List), fileDirectory)
}

// Read mocks base method.
func (m *MockFileService) Read(filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileServiceMockRecorder) Read(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileService)(nil).Read), filename)
}

// Write mocks base method.
func (m *MockFileService) Write(migrationDir, filename, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", migrationDir, filename, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockFileServiceMockRecorder) Write(migrationDir, filename, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFileService)(nil).Write), migrationDir, filename, content)
}
