// Code generated by MockGen. DO NOT EDIT.
// Source: applications/migrationscripts.go

// Package applications is a generated GoMock package.
package applications

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/kenji-yamane/mgr8/domain"
)

// MockMigrationFileService is a mock of MigrationFileService interface.
type MockMigrationFileService struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationFileServiceMockRecorder
}

// MockMigrationFileServiceMockRecorder is the mock recorder for MockMigrationFileService.
type MockMigrationFileServiceMockRecorder struct {
	mock *MockMigrationFileService
}

// NewMockMigrationFileService creates a new mock instance.
func NewMockMigrationFileService(ctrl *gomock.Controller) *MockMigrationFileService {
	mock := &MockMigrationFileService{ctrl: ctrl}
	mock.recorder = &MockMigrationFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationFileService) EXPECT() *MockMigrationFileServiceMockRecorder {
	return m.recorder
}

// GetNextMigrationNumber mocks base method.
func (m *MockMigrationFileService) GetNextMigrationNumber(dir string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextMigrationNumber", dir)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextMigrationNumber indicates an expected call of GetNextMigrationNumber.
func (mr *MockMigrationFileServiceMockRecorder) GetNextMigrationNumber(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextMigrationNumber", reflect.TypeOf((*MockMigrationFileService)(nil).GetNextMigrationNumber), dir)
}

// GetSchemaFromFile mocks base method.
func (m *MockMigrationFileService) GetSchemaFromFile(filename string) (*domain.Schema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaFromFile", filename)
	ret0, _ := ret[0].(*domain.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaFromFile indicates an expected call of GetSchemaFromFile.
func (mr *MockMigrationFileServiceMockRecorder) GetSchemaFromFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaFromFile", reflect.TypeOf((*MockMigrationFileService)(nil).GetSchemaFromFile), filename)
}

// WriteStatementsToFile mocks base method.
func (m *MockMigrationFileService) WriteStatementsToFile(migrationDir string, statements []string, migrationNumber int, migrationType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStatementsToFile", migrationDir, statements, migrationNumber, migrationType)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteStatementsToFile indicates an expected call of WriteStatementsToFile.
func (mr *MockMigrationFileServiceMockRecorder) WriteStatementsToFile(migrationDir, statements, migrationNumber, migrationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStatementsToFile", reflect.TypeOf((*MockMigrationFileService)(nil).WriteStatementsToFile), migrationDir, statements, migrationNumber, migrationType)
}

// MockFileNameFormatter is a mock of FileNameFormatter interface.
type MockFileNameFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockFileNameFormatterMockRecorder
}

// MockFileNameFormatterMockRecorder is the mock recorder for MockFileNameFormatter.
type MockFileNameFormatterMockRecorder struct {
	mock *MockFileNameFormatter
}

// NewMockFileNameFormatter creates a new mock instance.
func NewMockFileNameFormatter(ctrl *gomock.Controller) *MockFileNameFormatter {
	mock := &MockFileNameFormatter{ctrl: ctrl}
	mock.recorder = &MockFileNameFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileNameFormatter) EXPECT() *MockFileNameFormatterMockRecorder {
	return m.recorder
}

// FormatFilename mocks base method.
func (m *MockFileNameFormatter) FormatFilename(arg0 int, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatFilename", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatFilename indicates an expected call of FormatFilename.
func (mr *MockFileNameFormatterMockRecorder) FormatFilename(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatFilename", reflect.TypeOf((*MockFileNameFormatter)(nil).FormatFilename), arg0, arg1)
}
